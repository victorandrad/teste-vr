{"version":3,"sources":["service/api.ts","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","Search","Input","Meta","Card","App","useState","lista","setLista","modalView","setModalView","refreshList","setRefreshList","count","setCount","limit","offset","setOffset","pokemonDetail","setPokemonDetail","useEffect","params","get","then","response","data","results","getPokemonId","urlPokemon","split","replace","detailsPokemon","pokemonId","catch","error","Modal","title","content","className","placeholder","allowClear","onSearch","value","toLowerCase","style","width","grid","gutter","xs","sm","md","lg","xl","loading","length","itemLayout","dataSource","pagination","defaultCurrent","showSizeChanger","total","pageSize","onChange","page","renderItem","item","Item","hoverable","name","onClick","url","cover","alt","src","onError","e","target","visible","onOk","onCancel","sprites","other","front_default","bordered","layout","label","abilities","map","ability","index","types","type","stats","stat","percentage","base_stat","percent","format","ReactDOM","render","document","getElementById"],"mappings":"sSAGaA,E,OAAMC,EAAMC,OAAO,CAC5BC,QAAS,8B,QCALC,EAAWC,IAAXD,OACAE,EAASC,IAATD,KA8LOE,MA5Lf,WAAe,MAEaC,mBAAc,IAF3B,mBAENC,EAFM,KAECC,EAFD,OAGqBF,oBAAS,GAH9B,mBAGNG,EAHM,KAGKC,EAHL,OAIyBJ,oBAAS,GAJlC,mBAINK,EAJM,KAIOC,EAJP,OAKaN,mBAAS,GALtB,mBAKNO,EALM,KAKCC,EALD,OAMIR,mBAAS,IAAnBS,EANM,sBAOeT,mBAAS,GAPxB,mBAONU,EAPM,KAOEC,EAPF,OAQ6BX,qBAR7B,mBAQNY,EARM,KAQSC,EART,KAiBbC,qBAAU,WACR,IAAIC,EAAS,CAAEL,SAAQD,SAEvBlB,EAAIyB,IAAI,WAAY,CAAED,WAAUE,MAAK,SAACC,GAAmB,IACjDC,EAASD,EAATC,KACAC,EAAmBD,EAAnBC,QAASb,EAAUY,EAAVZ,MAEfC,EAASD,GACTD,GAAe,GACfJ,EAASkB,QAEV,CAACf,EAAaK,EAAQD,IAEzB,IAAMY,EAAe,SAACC,GACpB,OAAQA,EAAWC,MAAM,aAAa,GAAIC,QAAQ,IAAK,KAGnDC,EAAiB,SAACC,GACtBnC,EAAIyB,IAAJ,mBAAoBU,IAAaT,MAAK,SAACC,GACrCd,GAAa,GAD0C,IAE/Ce,EAASD,EAATC,KAERN,EAAiBM,MAChBQ,OAAM,WACPC,QAIEA,EAAQ,WACZC,IAAMD,MAAM,CACVE,MAAO,gBACPC,QAAS,yFAKb,OACE,qCACE,sBAAKC,UAAU,kBAAf,UAEE,cAACrC,EAAD,CAAQqC,UAAU,iBAAiBC,YAAY,8BAA8BC,YAAU,EAACC,SA9C7E,SAACC,GACZA,GACFX,EAAeW,EAAMC,cAAcb,QAAQ,IAAK,OA4C8Dc,MAAO,CAAEC,MAAO,UAF9H,iBAQE,cAAC,IAAD,CACEC,KAAM,CACJC,OAAQ,GACRC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,GAENd,UAAU,QACVe,QAA0B,IAAjB9C,EAAM+C,OACfC,WAAW,aACXC,WAAYjD,EACZkD,WAAY,CACVC,eAAgB,EAChBC,iBAAiB,EACjBC,MAAO/C,EACPgD,SAAU9C,EACV+C,SAAU,SAACC,GACT9C,GAAW8C,EAAO,GAAKhD,KAG3BiD,WAAY,SAACC,GAAD,OACV,cAAC,IAAKC,KAAN,UACE,cAAC,IAAD,CACEC,WAAS,EACT7B,UAAS,kBAAa2B,EAAKG,MAC3BxB,MAAO,CAAEC,MAAO,KAChBwB,QAAS,kBAAMtC,EAAeJ,EAAasC,EAAKK,OAChDC,MAAO,qBAAKC,IAAKP,EAAKG,KAAMK,IAAG,0GAAqG9C,EAAasC,EAAKK,KAAvH,QAAmII,QAAS,SAACC,GAAD,OAAYA,EAAEC,OAAOH,IAAM,wBALxM,SAOE,cAACtE,EAAD,CAAMiC,MAAO6B,EAAKG,iBAQ5B,cAAC,IAAD,CACEhC,MAAM,sBACNyC,QAASpE,EACTqE,KAAM,WACJpE,GAAa,IAEfqE,SAAU,WACRrE,GAAa,IAPjB,SAUIQ,EAME,qCACE,sBAAKoB,UAAU,OAAf,UAEE,mBAAGA,UAAS,8BAAyBpB,EAAckD,MAAnD,SAA4DlD,EAAckD,OAE1E,cAAC,IAAD,CACEvB,MAAO,IACP4B,IAAKvD,EAAc8D,QAAQC,MAAM,oBAAoBC,mBAIzD,uBAEA,gCACE,eAAC,IAAD,CACEC,UAAQ,EACRC,OAAO,WAFT,UAIE,cAAC,IAAalB,KAAd,CAAmBmB,MAAM,YAAzB,SACGnE,EAAcoE,UAAUC,KAAI,SAACC,EAAcC,GAC1C,OACE,gCACE,4BAAID,EAAQA,QAAQpB,OACpB,yBAFQqB,QAOhB,cAAC,IAAavB,KAAd,CAAmBmB,MAAM,QAAzB,SACGnE,EAAcwE,MAAMH,KAAI,SAACI,EAAWF,GACnC,OACE,gCACE,4BAAIE,EAAKA,KAAKvB,OACd,yBAFQqB,WASlB,cAAC,IAAD,IAEA,cAAC,IAAD,CACEN,UAAQ,EACRC,OAAO,WAFT,SAIE,cAAC,IAAalB,KAAd,CAAmBmB,MAAM,aAAzB,SACGnE,EAAc0E,MAAML,KAAI,SAACM,EAAWJ,GACnC,IAAIK,EAA+B,IAAjBD,EAAKE,UAAmB,IAE1C,OACE,gCACE,cAAC,IAAD,CAAUC,QAASF,EAAYG,OAAQ,WACrC,OAAOJ,EAAKE,aAEd,4BAAIF,EAAKA,KAAKzB,OACd,yBALQqB,gBAvDtB,qBAAKnD,UAAU,YAAf,SACE,cAAC,IAAD,Y,OCrHd4D,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7a581201.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// Define url base das requisições\nexport const api = axios.create({\n    baseURL: 'https://pokeapi.co/api/v2',\n})","import { Card, Descriptions, Divider, Image, Input, List, Modal, Progress, Spin } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport { api } from './service/api';\nconst { Search } = Input;\nconst { Meta } = Card;\n\nfunction App() {\n  // Define variaveis de estado\n  const [lista, setLista] = useState<any>([]);\n  const [modalView, setModalView] = useState(false);\n  const [refreshList, setRefreshList] = useState(false);\n  const [count, setCount] = useState(0);\n  const [limit,] = useState(35);\n  const [offset, setOffset] = useState(0);\n  const [pokemonDetail, setPokemonDetail] = useState<any>();\n\n  // Ação de pesquisa de registro\n  const onSearch = (value: string) => {\n    if (value) {\n      detailsPokemon(value.toLowerCase().replace(' ', '-'));\n    }\n  };\n\n  useEffect(() => {\n    let params = { offset, limit };\n\n    api.get('/pokemon', { params }).then((response: any) => {\n      let { data } = response;\n      let { results, count } = data;\n\n      setCount(count);\n      setRefreshList(false);\n      setLista(results);\n    });\n  }, [refreshList, offset, limit]);\n\n  const getPokemonId = (urlPokemon: string) => {\n    return (urlPokemon.split('/pokemon/')[1]).replace('/', '');\n  }\n\n  const detailsPokemon = (pokemonId: string) => {\n    api.get(`/pokemon/${pokemonId}`).then((response: any) => {\n      setModalView(true);\n      const { data } = response;\n\n      setPokemonDetail(data);\n    }).catch(() => {\n      error();\n    });\n  }\n\n  const error = () => {\n    Modal.error({\n      title: 'Atenção',\n      content: 'O Pokémon digitado não existe. Tente digitar o nome igual do card da Pokedex.',\n    });\n  }\n\n  // Elementos da página usando componentes do Ant Design\n  return (\n    <>\n      <div className=\"container-lista\">\n        {/* Caixa de pesquisa */}\n        <Search className=\"pokemon-search\" placeholder=\"Pesquisar pokemon pelo nome\" allowClear onSearch={onSearch} style={{ width: '100%' }} />\n        &nbsp;\n        &nbsp;\n        &nbsp;\n\n        {/* Lista todos os pokemons com paginação */}\n        <List\n          grid={{\n            gutter: 32,\n            xs: 1,\n            sm: 2,\n            md: 4,\n            lg: 4,\n            xl: 6,\n          }}\n          className=\"lista\"\n          loading={lista.length === 0}\n          itemLayout=\"horizontal\"\n          dataSource={lista}\n          pagination={{\n            defaultCurrent: 1,\n            showSizeChanger: false,\n            total: count,\n            pageSize: limit,\n            onChange: (page) => {\n              setOffset((page - 1) * limit);\n            }\n          }}\n          renderItem={(item: any) => (\n            <List.Item>\n              <Card\n                hoverable\n                className={`pokemon-${item.name}`}\n                style={{ width: 240 }}\n                onClick={() => detailsPokemon(getPokemonId(item.url))}\n                cover={<img alt={item.name} src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${getPokemonId(item.url)}.png`} onError={(e: any) => e.target.src = './img/pokeball.png'} />}\n              >\n                <Meta title={item.name} />\n              </Card>\n            </List.Item>\n          )}\n        />\n      </div>\n\n      {/* Modal de vizualização de pokemon */}\n      <Modal\n        title=\"Detalhes do pokemon\"\n        visible={modalView}\n        onOk={() => {\n          setModalView(false);\n        }}\n        onCancel={() => {\n          setModalView(false)\n        }}\n      >\n        {!pokemonDetail\n          ? (\n            <div className=\"load-spin\">\n              <Spin />\n            </div>\n          ) : (\n            <>\n              <div className=\"head\">\n\n                <p className={`title title-pokemon-${pokemonDetail.name}`}>{pokemonDetail.name}</p>\n\n                <Image\n                  width={200}\n                  src={pokemonDetail.sprites.other['official-artwork'].front_default}\n                />\n              </div>\n\n              <br />\n\n              <div>\n                <Descriptions\n                  bordered\n                  layout=\"vertical\"\n                >\n                  <Descriptions.Item label=\"Abilities\">\n                    {pokemonDetail.abilities.map((ability: any, index: number) => {\n                      return (\n                        <div key={index}>\n                          <p>{ability.ability.name}</p>\n                          <br />\n                        </div>\n                      )\n                    })}\n                  </Descriptions.Item>\n                  <Descriptions.Item label=\"Types\">\n                    {pokemonDetail.types.map((type: any, index: number) => {\n                      return (\n                        <div key={index}>\n                          <p>{type.type.name}</p>\n                          <br />\n                        </div>\n                      )\n                    })}\n                  </Descriptions.Item>\n                </Descriptions>\n\n                <Divider></Divider>\n\n                <Descriptions\n                  bordered\n                  layout=\"vertical\"\n                >\n                  <Descriptions.Item label=\"Base stats\">\n                    {pokemonDetail.stats.map((stat: any, index: number) => {\n                      let percentage = (stat.base_stat * 100) / 260;\n\n                      return (\n                        <div key={index}>\n                          <Progress percent={percentage} format={() => {\n                            return stat.base_stat;\n                          }} />\n                          <p>{stat.stat.name}</p>\n                          <br />\n                        </div>\n                      )\n                    })}\n                  </Descriptions.Item>\n                </Descriptions>\n              </div>\n            </>\n          )}\n      </Modal>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}